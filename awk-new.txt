
# AWK COMMAND IN LINUX - DETAILED EXPLANATION


# What is AWK?
 ------------
 AWK is a powerful text-processing tool in Linux. It is used to:
 - Extract specific columns or fields from a file.
- Perform calculations (like sum, average, etc.).
 - Search for patterns or words in a file.
- Format and manipulate text data.

 Basic Syntax:
 -------------
 awk 'pattern {action}' file-name
   - pattern: A condition to filter lines (optional).
   - action: What to do with the matching lines (e.g., print, calculate).
   - file-name: The file to process.

 Example 1: Print the 2nd Column from a File
 -------------------------------------------
Suppose you have a file `country.txt` with the following data:
country  capitals
 -----------------
 india    delhi
 usa      washington
uk       london

 To print only the 2nd column (capitals), use:
awk '{print $2}' country.txt
 Explanation:
 - `{print $2}`: Print the 2nd column.
 - `$2`: Refers to the 2nd field (column) in each line.
- `country.txt`: The file to process.

 Predefined Variables in AWK:
# ----------------------------
# - NR: Current line number (Number of Records).
# - NF: Number of fields in the current line.
# - $0: The entire line.
# - $1, $2, $3, etc.: Specific fields (columns) in the line.

# Example 2: Working with Employee Data
# -------------------------------------
# Suppose you have a file `emp.txt` with the following data:
# ID  Name       Department  Salary
# --------------------------------
# 1   John       HR          50000
# 2   Alice      IT          75000
# 3   Bob        Sales       60000
# 4   Eve        IT          80000
# 5   Charlie    HR          55000
# 6   David      Sales       62000

# 1. Print the Salary Column (4th Column):
awk '{print $4}' emp.txt
# Explanation:
# - `$4`: Refers to the 4th column (Salary).

# 2. Print Name and Salary:
awk '{print $2, $4}' emp.txt
# Explanation:
# - `$2`: Name column.
# - `$4`: Salary column.

# 3. Search for a Specific Word (e.g., "John"):
awk '/John/{print $0}' emp.txt
# Explanation:
# - `/John/`: Searches for lines containing "John".
# - `{print $0}`: Prints the entire line where "John" is found.

# 4. Print Line Numbers with Data:
awk '{print NR, $0}' emp.txt
# Explanation:
# - `NR`: Current line number.
# - `$0`: The entire line.

# 5. Print Only Line Number 5:
awk 'NR==5 {print $0}' emp.txt
# Explanation:
# - `NR==5`: Matches the 5th line.

# 6. Print a Range of Lines (Lines 2 to 5):
awk 'NR==2,NR==5 {print $0}' emp.txt
# Explanation:
# - `NR==2,NR==5`: Matches lines from 2 to 5.

# 7. Print Line Numbers of Empty Lines:
awk 'NF==0 {print NR}' emp.txt
# Explanation:
# - `NF==0`: Matches lines with no fields (empty lines).

# 8. Search for Multiple Words (e.g., "John" and "David"):
awk '/John|David/{print $0}' emp.txt
# Explanation:
# - `/John|David/`: Searches for lines containing "John" or "David".

# 9. Check if a Character is Present in a Column (e.g., "a" in Names):
awk '$2 ~ /a/ {print $0}' emp.txt
# Explanation:
# - `$2 ~ /a/`: Checks if the 2nd column (Name) contains the letter "a".

# Working with CSV Files:
# -----------------------
# Suppose you have a CSV file `emp.csv` with the following data:
# ID,Name,Department,Salary
# 1,John,HR,50000
# 2,Alice,IT,75000
# 3,Bob,Sales,60000
# 4,Eve,IT,80000
# 5,Charlie,HR,55000
# 6,David,Sales,62000

# 1. Print the 3rd Column (Department) from a CSV File:
awk -F, '{print $3}' emp.csv
# Explanation:
# - `-F,`: Specifies the field separator as a comma.

# 2. Print Employees with Salary > 50000:
awk -F, '$NF > 50000 {print $0}' emp.csv
# Explanation:
# - `$NF`: Refers to the last field (Salary).

# 3. Handle Multiple Delimiters (e.g., comma, colon, hyphen):
awk -F'[,:-]' '{print $4}' emp.txt
# Explanation:
# - `-F'[,:-]'`: Specifies multiple delimiters.

# Advanced AWK Features:
# ----------------------
# 1. Replace a Word in a File:
awk '{gsub("Bob", "Rob"); print $0}' emp.txt
# Explanation:
# - `gsub("Bob", "Rob")`: Replaces "Bob" with "Rob".

# 2. Find the Length of Characters in a Column:
awk '{print $2, length($2)}' emp.txt
# Explanation:
# - `length($2)`: Calculates the length of the 2nd column (Name).

# 3. Find the Position/Index of a Word in a File:
awk '/Rob/{print NR, index($0, "Rob")}' emp.txt
# Explanation:
# - `index($0, "Rob")`: Finds the position of "Rob" in the line.

# 4. Print Values in Upper or Lower Case:
# Convert to Lowercase:
awk '{print tolower($2)}' emp.txt
# Convert to Uppercase:
awk '{print toupper($2)}' emp.txt


# Example: Calculate the Sum of the Salary Column:
awk 'BEGIN{sum=0} {sum=sum+$NF} END{print "Sum of Salary:", sum}' emp.txt
# Explanation:
# - `sum=0`: Initializes a variable.
# - `sum=sum+$NF`: Adds the salary to the sum.
# - `END{print "Sum of Salary:", sum}`: Prints the total sum.

# Example: Add a Column to Indicate High or Low Salary:
awk '{if($NF>50000) $5="High"; else $5="Low"; print $0}' emp.txt
# Explanation:
# - `if($NF>50000)`: Checks if the salary is greater than 50000.
# - `$5="High"`: Adds a new column with "High" or "Low".

**AWK Scripting**

**lets st

**BEGIN and END Blocks**
    In AWK scripting, we can perform actions **before** or **after** processing a file by using `BEGIN` and `END` blocks. These blocks allow us to perform initial setups and final actions.

    **Syntax:**
        awk 'BEGIN{actions} {actions} END{actions}' file

**EXAMPLES**

**Example 1: Print Information Before and After File Reading**

    Consider the following AWK command to print information before and after reading the file `emp.txt`:

    ```bash
    awk 'BEGIN{print "----emp data----"} {print $0} END{print "-----emp data ends-----"}' emp.txt
    ```

    **Explanation:**
    - `BEGIN{print "----emp data----"}`: This prints a message before reading the file.
    - `{print $0}`: This prints the entire line from the file.
    - `END{print "-----emp data ends-----"}`: This prints a message after processing the file.

    **Output:**
    ```
    ----emp data----
    1   John       HR          50000
    2   Alice      IT          75000
    3   Bob        Sales       60000
    4   Eve        IT          80000
    5   Charlie    HR          55000
    6   David      Sales       62000
    -----emp data ends-----
    ```

---

**Example 2: Find Sum of Salary Column**

    To calculate the sum of the **salary** column from `emp.txt`, use the following AWK command:

    ```bash
    awk 'BEGIN{sum=0} {sum=sum+$NF} END{print "sum of the salary:" sum}' emp.txt
    ```

    **Explanation:**
    - `BEGIN{sum=0}`: Initializes the `sum` variable to 0 before processing any lines.
    - `{sum=sum+$NF}`: Adds the value from the **last field** (`$NF` represents the last field, typically the salary) to `sum` for each line.
    - `END{print "sum of the salary:" sum}`: Prints the final sum after processing all lines.

    **Output:**
    ```
    sum of the salary: 380000
    ```

---

**Example 3: Calculate the Average Salary**

    To calculate the average salary from `emp.txt`, use this AWK command:

    ```bash
    awk 'BEGIN{sum=0; users=0} NR>2 {sum=sum+$NF; if($NF>0) users++} END{print "avg of salary:" sum/users}' emp.txt
    ```

    **Explanation:**
    - `BEGIN{sum=0; users=0}`: Initializes `sum` to 0 and `users` to 0.
    - `NR>2 {sum=sum+$NF; if($NF>0) users++}`: Starts processing from line 3 (`NR>2`), adds salary to `sum`, and counts users with a salary greater than 0.
    - `END{print "avg of salary:" sum/users}`: Calculates and prints the average salary.

    **Output:**
    ```
    avg of salary: 63333.3333333
    ```

---

**Example 4: Find Length of the Longest Line**

    To get the length of the longest line in `emp.txt`, use the following command:

    ```bash
    awk '{if(length($0)>max) max=length($0)} END{print "Longest line length:", max}' emp.txt
    ```

    **Explanation:**
    - `{if(length($0)>max) max=length($0)}`: This checks the length of each line using `length($0)` and updates the `max` variable with the longest length.
    - `END{print "Longest line length:", max}`: Prints the length of the longest line.

    **Output:**
    ```
    Longest line length: 41
    ```

---

**Example 5: Print "High" or "Low" Based on Salary**

    To add a column indicating if the salary is high (greater than 50K) or low (less than or equal to 50K), use the following AWK command:

    ```bash
    awk '{if($NF>50000) $7="High"; else $7="Low"; print $0}' emp.txt
    ```

    **Explanation:**
    - `{if($NF>50000) $7="High"; else $7="Low"}`: Checks if the salary (last field, `$NF`) is greater than 50,000 and assigns "High" or "Low" to the 7th field.
    - `print $0`: Prints the entire line after modifying the 7th field.

    **Output:**
    ```
    1   John       HR          50000   Low
    2   Alice      IT          75000   High
    3   Bob        Sales       60000   High
    4   Eve        IT          80000   High
    5   Charlie    HR          55000   High
    6   David      Sales       62000   High
    ```

---

**Using AWK in a Script**

    Writing multiple conditions directly in an AWK command can be complex. To simplify, you can write AWK scripts in a file and execute them.

    **Creating and Executing an AWK Script:**

    1. Create a new file with a `.awk` extension (e.g., `awk_file.awk`).
    2. Inside the file, include the following:

        ```bash
        #!/bin/awk -f

        BEGIN {
          print "hello"
        }

        {
          print $1
        }
        ```

    3. Make the script executable:

        ```bash
        chmod +x awk_file.awk
        ```

    4. Run the script with a file argument:

        ```bash
        ./awk_file.awk emp.txt
        ```

    **Explanation:**
    - `#!/bin/awk -f`: Specifies the AWK interpreter.
    - `BEGIN { print "hello" }`: Prints "hello" before processing any lines.
    - `{ print $1 }`: Prints the first field (e.g., employee ID) for each line.

    **Output:**
    ```
    hello
    1
    2
    3
    4
    5
    6
    ```

---

**Multiple Conditions in AWK Script**

    When you have multiple conditions to evaluate, it is easier to write them in a script file:

    ```bash
    #!/bin/awk -f

    BEGIN {
      print "hello"
    }

    {
      print $0
    }

    END {
      print "end"
    }
    ```

    To execute this script, use:

    ```bash
    awk -f filename.awk emp.txt
    ```

    **Explanation:**
    - `BEGIN { print "hello" }`: Prints "hello" before reading the file.
    - `{ print $0 }`: Prints the entire line.
    - `END { print "end" }`: Prints "end" after reading the file.

---

**Creating Functions in AWK**

    AWK allows you to create functions for repetitive tasks. Functions help simplify complex scripts by breaking them into reusable parts.

    **Example of a Function to Add Two Numbers:**

    ```bash
    #!/bin/awk -f

    function add(a, b) {
      return a + b
    }

    BEGIN {
      print "Sum of 5 and 7 is:", add(5, 7)
    }
    ```

    **Output:**
    ```
    Sum of 5 and 7 is: 12
    ```

---

This complete AWK scripting guide provides examples, syntax, and usage instructions in a **bash-style** format. You can now copy and use it for your AWK scripting needs.
